background			#设置背景
	color= 0.05 0.05 0.05		//背景颜色					[缺省值(0,0,0)]
end

camera				#设置摄像机信息
	O= 3 0 9			//感光点的位置					[*]
	N= -1 0 -1			//摄像机的朝向					[*]
	//O= 0 0 -1
	//N= -1 0 0
	image_H= 76			//bmp图像的象素高				[缺省值420]
	image_W= 128			//bmp图像的象素宽				[缺省值420]
	lens_H= 0.6			//摄像机镜头的高（与镜头到感光点距离之比）		[缺省值0.88]
	lens_W= 1.0			//摄像机镜头的宽					[缺省值0.88]
	shade_quality= 4		//计算面积光源光照的质量				[缺省值4]
end
light area			#设置一个矩形光源
	O= 1 1 9			//矩形光源的中心点				[*]
	Dx= 1.5 0 0			//矩形光源的x半轴				[*]
	Dy= 0 1.5 0			//矩形光源的y半轴				[*]
	color= 130 130 130			//光源的色光					[*]
end

primitive bezier			#设置一个bezier1
	Dz= 0.4528745238 -0.2614672282 5.9771681886
	S= 160              //缩放因子
	P= 0.4528745238 -0.2614672282 5.9771681886
	control_points= 5  0 0  -35.3 4.5   27.2 17.1   -24 11.6   0 31.7
	color= 1 1 1
	texture= marble.bmp		//有纹理，设置纹理所在bmp文件			[*有纹理时必须]
	diff= 1			//漫反射百分比					[缺省值0]
	refl= 0
end

primitive bezier			#设置一个bezier2
	Dz= 0.0000000000 0.5229344565 5.9771681886
	S= 160              //缩放因子
	P= 0.0000000000 0.5229344565 5.9771681886
	control_points= 5  0 0  -35.3 4.5   27.2 17.1   -24 11.6   0 31.7
	color= 1 1 1
	texture= marble.bmp		//有纹理，设置纹理所在bmp文件			[*有纹理时必须]
	diff= 1			//漫反射百分比					[缺省值0]
	refl= 0
end

primitive bezier			#设置一个bezier3
	Dz= -0.4528745238 -0.2614672282 5.9771681886
	S= 160              //缩放因子
	P= -0.4528745238 -0.2614672282 5.9771681886
	control_points= 5  0 0  -35.3 4.5   27.2 17.1   -24 11.6   0 31.7
	color= 1 1 1
	texture= marble.bmp		//有纹理，设置纹理所在bmp文件			[*有纹理时必须]
	diff= 1			//漫反射百分比					[缺省值0]
	refl= 0
end

primitive sphere		#设置一个球
	O= 0 0 0
	R= 6
	color= 1 1 1
	texture= floor.bmp		//有纹理，设置纹理所在bmp文件			[*有纹理时必须]
	De= 0 0 1			//球的z轴					[缺省值(0,0,1)仅在有纹理时可选]
	Dc= 0 1 0			//球的极轴					[缺省值(0,1,0)仅在有纹理时可选]
	spec= 0.7			//漫反射百分比					[缺省值0]
	refl= 0.3
end

primitive sphere		#设置一个球（一个透明的玻璃球）
	O= 0 0 7.1		//球心						[*]
	R= 0.1				//半径						[*]
	refr= 1				//折射所占百分比					[缺省值0]
	rindex= 1.7			//折射率						[*有折射时必须]
	absor= 1 0 0			//吸收色光的强度					[*有折射时必须]
end

primitive bezier #bezier4
	P= 0 0 5.99
	S= 50
	Dz= 0 0 1
	color= 1 1 1
	control_points= 5  -12.2 0 	-2 -0.3  	9.8 26.3	-22 14.4	-14 47
	refr= 0.8
	rindex= 1
	absor= 0 0 0
	diff= 0.1
	refl= 0.1
end

end =======
primitive sphere		#设置一个球（一个镜面反射的球）
	O= 1.5 6.3 -1.6
	R= 0.4
	color= 0.5 0.5 1
	refl= 1				//镜面反射所占百分比				[缺省值0]
end

primitive sphere		#设置一个球（一个大理石球）
	O= 0 6 -1.5
	R= 0.5
	color= 1 1 1
	texture= marble.bmp		//有纹理，设置纹理所在bmp文件			[*有纹理时必须]
	De= 0 0 1			//球的z轴					[缺省值(0,0,1)仅在有纹理时可选]
	Dc= 0 1 0			//球的极轴					[缺省值(0,1,0)仅在有纹理时可选]
	diff= 0.7			//漫反射百分比					[缺省值0]
	refl= 0.3
	drefl= 0.25			//蒙特卡罗算法计算镜面漫反射时反射光的偏差半径	[缺省值0，值为0时不使用该算法]
end

primitive plane			#设置一个球（木地板）
	N= 0 0 1			//平面的法向量（正方向）				[*]
	R= -2				//原点到平面的距离				[*]
	color= 1 1 1
	diff= 0.5
	refl= 0.5
	drefl= 0.15
	texture= floor.bmp
	Dx= 8 0 0			//平面的x轴，其长度有意义：其纹理在场景中的长	[*有纹理时必须]
	Dy= 0 8 0			//平面的y轴					[*有纹理时必须]
end
